import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.SkipException;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;


//It is possible to attach screenshots. To add a screen-shot, simply call addScreenCapture. 
//This method returns the HTML with  tag which can be used anywhere in the log details.

public class ExtentSparkReporterTest{
	ExtentReports extent;
	ExtentSparkReporter sparkReporter;
	ExtentTest logger;
	WebDriver driver;
	String reportPath;

	public void extentInfoLog(String message)
	{
		logger.log(Status.PASS,MarkupHelper.createLabel(message,ExtentColor.GREEN));
	}
	
	public void extentSkipLog(String message)
	{
		logger.log(Status.SKIP,MarkupHelper.createLabel(message,ExtentColor.ORANGE));
	}
	
	public void extentFailLog(String message)
	{
		logger.log(Status.FAIL,MarkupHelper.createLabel(message,ExtentColor.RED));
	}
	
	public void extentFailLog(String message,String title) throws Exception
	{
		logger.log(Status.FAIL,MarkupHelper.createLabel(message,ExtentColor.RED));
		String screenshotPath = getScreenshot(driver, title);
		logger.addScreenCaptureFromPath(screenshotPath);
	}
	
	@BeforeTest
	public void customReport() {
		System.out.println("Before Test");
		reportPath = System.getProperty("user.dir") + "\\AutomationReport\\";
		sparkReporter = new ExtentSparkReporter(reportPath);
		sparkReporter.config().setDocumentTitle("Appium Automation");
		sparkReporter.config().setReportName("Automation Execution Report");
		sparkReporter.config().setTheme(com.aventstack.extentreports.reporter.configuration.Theme.DARK);
		extent = new ExtentReports();
		//extent.attachReporter(sparkReporter);
		extent.setSystemInfo("Application Name", "ExtentReport");
		extent.setSystemInfo("Platform", System.getProperty("os.name"));
		extent.setSystemInfo("Environment", "QA");
		
	}

	//This method is to capture the screenshot and return the path of the screenshot.
	public static String getScreenshot(WebDriver driver, String screenshotName) throws Exception {
		String dateName = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
		TakesScreenshot ts = (TakesScreenshot) driver;
		File source = ts.getScreenshotAs(OutputType.FILE);
		//after execution, you could see a folder "FailedTestsScreenshots" under src folder
		String destination = System.getProperty("user.dir") + "\\FailedTestsScreenshots\\"+screenshotName+dateName+".png";
		File finalDestination = new File(destination);

		FileUtils.copyFile(source, finalDestination);
		return destination;
	}

	@Test
	public void passTest(){
		//extent.startTest("TestCaseName", "Description")
		//TestCaseName – Name of the test
		//Description – Description of the test
		//Starting test
		logger = extent.createTest("passTest");
		Assert.assertTrue(true);
		//To generate the log when the test case is passed
		extentInfoLog("Test Case Passed is passTest");
	}

	@Test
	public void failTest(){
		//My intention is to fail this method
		//If this method fails, then it goes to the @AfterMethod and calls the getScreenshot method and captures a screenshot and place it in the extent reports
		logger = extent.createTest("failTest");
		System.setProperty("webdriver.chrome.driver",System.getProperty("user.dir")+"\\src\\test\\resources\\chromedriver.exe");
		driver = new ChromeDriver();
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		
		extentInfoLog("Chrome Driver is launched");
		driver.get("https://chromedriver.chromium.org/downloads");
		String currentURL = driver.getTitle();
		Assert.assertEquals(currentURL, "NoTitle");
		
		extentInfoLog("Test Case (failTest) Status is passed");
	}

	@Test
	public void skipTest(){
		logger = extent.createTest("skipTest");
		throw new SkipException("Skipping - This is not ready for testing ");
	}

	@AfterMethod
	public void getResult(ITestResult result) throws Exception{
		if(result.getStatus() == ITestResult.FAILURE){
			extentFailLog("Test Case Failed is "+result.getName());
			extentFailLog("Test Case Failed is "+result.getThrowable().getMessage(), result.getName());
			
		}else if(result.getStatus() == ITestResult.SKIP){
			extentSkipLog("Test Case Skipped is "+result.getName());
		}
		// ending test
		//endTest(logger) : It ends the current test and prepares to create HTML report
	}
	@AfterTest
	public void endReport(){
		extent.flush();
		DateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy_HH-mm-ss");
		Date date = new Date();
		String filePathdate = dateFormat.format(date).toString();
		String actualReportPath = reportPath + "index.html";
		new File(actualReportPath).renameTo(new File(
		System.getProperty("user.dir") + "/AutomationReport/" + "Automation_" + filePathdate + ".html"));
		driver.close();
		driver.quit();
	}
}